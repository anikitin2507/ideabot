"""Decision handler for processing user messages and generating advice."""

import structlog
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message

from src.config import create_config
from src.services.openai_client import OpenAIClient
from src.services.option_parser import OptionParser

logger = structlog.get_logger()


class DecisionHandler:
    """Handler for decision-making requests."""

    def __init__(self):
        """Initialize the decision handler."""
        self.router = Router()
        self.config = create_config()
        self.option_parser = OptionParser(max_options=self.config.max_options)
        self.openai_client = OpenAIClient(self.config)

        # Register message handlers
        self.router.message(Command("start"))(self.start_command)
        self.router.message(Command("help"))(self.help_command)
        self.router.message(F.text)(self.handle_decision_request)

    async def start_command(self, message: Message) -> None:
        """Handle /start command."""
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –º–µ–∂–¥—É –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è, "
            "–∏ —è –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π!\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ü–∏—Ü—Ü–∞ –∏–ª–∏ —Å—É—à–∏?\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º, –ø–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É –∏–ª–∏ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É\n"
            "‚Ä¢ 1. –ü–æ–π—Ç–∏ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª\n2. –û—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )

        await message.answer(welcome_text)

        logger.info(
            "User started bot",
            user_id=message.from_user.id if message.from_user else None,
            username=message.from_user.username if message.from_user else None,
        )

    async def help_command(self, message: Message) -> None:
        """Handle /help command."""
        help_text = (
            "ü§ñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞\n"
            "2Ô∏è‚É£ –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Ö –∏ –¥–∞–º —Å–æ–≤–µ—Ç\n\n"
            "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
            "‚Ä¢ –ß–µ—Ä–µ–∑ ¬´–∏–ª–∏¬ª: <i>–ü–∏—Ü—Ü–∞ –∏–ª–∏ —Å—É—à–∏?</i>\n"
            "‚Ä¢ –ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: <i>–ö–∏–Ω–æ, —Ç–µ–∞—Ç—Ä, –¥–æ–º</i>\n"
            "‚Ä¢ –ü–æ —Å—Ç—Ä–æ–∫–∞–º:\n"
            "<i>–ö–æ—Ñ–µ\n"
            "–ß–∞–π\n"
            "–ö–∞–∫–∞–æ</i>\n"
            "‚Ä¢ –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n"
            "<i>1. –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞\n"
            "2. –ô–æ–≥–∞ –¥–æ–º–∞</i>\n\n"
            "<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ú–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {self.config.max_options} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∏ —è –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å! üéØ"
        )

        await message.answer(help_text, parse_mode="HTML")

    async def handle_decision_request(self, message: Message) -> None:
        """Handle user message with decision request."""
        if not message.text:
            return

        user_id = message.from_user.id if message.from_user else None
        username = message.from_user.username if message.from_user else None

        logger.info(
            "Processing decision request",
            user_id=user_id,
            username=username,
            message_length=len(message.text),
        )

        # Send "thinking" reaction
        await message.react("ü§î")

        # Parse options from message
        options = self.option_parser.parse_options(message.text)

        if not options:
            error_text = (
                "ü§∑‚Äç‚ôÇÔ∏è –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ —Ç–≤–æ—ë–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫:\n"
                "‚Ä¢ –ü–∏—Ü—Ü–∞ –∏–ª–∏ —Å—É—à–∏?\n"
                "‚Ä¢ –ö–∏–Ω–æ, —Ç–µ–∞—Ç—Ä –∏–ª–∏ –¥–æ–º\n"
                "‚Ä¢ 1. –í–∞—Ä–∏–∞–Ω—Ç –ê\n2. –í–∞—Ä–∏–∞–Ω—Ç –ë\n\n"
                "–û—Ç–ø—Ä–∞–≤—å /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤."
            )
            await message.answer(error_text)
            return

        if len(options) < 2:
            await message.answer(
                "ü§∑‚Äç‚ôÇÔ∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞. " "–î–æ–±–∞–≤—å –µ—â—ë –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç!"
            )
            return

        # Generate advice using OpenAI
        try:
            advice = await self.openai_client.get_decision_advice(options)

            if advice:
                # Format the response
                response_text = f"üéØ {advice}"
                await message.answer(response_text)

                logger.info(
                    "Decision advice sent successfully",
                    user_id=user_id,
                    options_count=len(options),
                    advice_length=len(advice),
                )
            else:
                # Fallback response if OpenAI fails
                fallback_advice = self._generate_fallback_advice(options)
                await message.answer(f"üéØ {fallback_advice}")

                logger.warning(
                    "Used fallback advice due to OpenAI failure",
                    user_id=user_id,
                    options_count=len(options),
                )

        except Exception as e:
            logger.error(
                "Error processing decision request", user_id=user_id, error=str(e)
            )

            await message.answer(
                "üòÖ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )

    def _generate_fallback_advice(self, options: list[str]) -> str:
        """Generate simple fallback advice when OpenAI is unavailable."""
        import random

        chosen_option = random.choice(options)
        fallback_reasons = [
            "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–µ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ –∏–Ω—Ç—É–∏—Ü–∏—é!",
            "–≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –∫–∞–∂–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º.",
            "–ü–æ–ø—Ä–æ–±—É–π —ç—Ç–æ—Ç - –∞ –µ—Å–ª–∏ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π!",
            "–ú–æ–π —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä - –Ω–æ –æ–Ω –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è —Å–∞–º—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º!",
            "–≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–≥–ª—è–¥–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø–æ—á–µ–º—É –±—ã –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?",
        ]

        reason = random.choice(fallback_reasons)
        return f"–†–µ–∫–æ–º–µ–Ω–¥—É—é {chosen_option}. {reason}"
